        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <time.h>
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:int adventurerCard(int *drawntreasure, struct gameState *state, int *cardDrawn, int *currentPlayer, int *temphand, int *z);
        -:   11:
        -:   12:
function random_number called 237 returned 100% blocks executed 100%
      237:   13:int random_number(int lower, int upper, int count) 
        -:   14:{ 
        -:   15:    int i, num; 
      474:   16:    for (i = 0; i < count; i++) { 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
      237:   17:        num = (rand() %(upper - lower + 1)) + lower; 
call    0 returned 100%
        -:   18:    } 
      237:   19:	return num;
        -:   20:}
        -:   21:
function main called 1 returned 100% blocks executed 95%
        1:   22:int main(int argc, char const *argv[]){
        -:   23:	
        -:   24:	struct gameState game;
        -:   25:	int i, j;
        1:   26:	int k[10] = {village, smithy, gardens, mine, feast, adventurer, council_room, salvager, sea_hag, steward};
        -:   27:	int drawntreasure;
        -:   28:	int player;
        -:   29:	int temphand[MAX_HAND]; 
        -:   30:	int z;
        -:   31:	int cardDrawn;
        1:   32:	int myCard = 1;
        1:   33:	if(myCard)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   34:		myCard = 0;
        -:   35:	int tempcoins;
        -:   36:
       16:   37:	for (i = 0; i < random_number(0, 100, 1); i ++){ 
call    0 returned 100%
branch  1 taken 94%
branch  2 taken 6% (fallthrough)
       15:   38:		initializeGame(random_number(2,4, 1), k, random_number(1, 9, 1), &game); 
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       15:   39:		player = game.whoseTurn; 
      103:   40:		for (j = 0; j < random_number(0, 25, 1); j++){ 
call    0 returned 100%
branch  1 taken 85%
branch  2 taken 15% (fallthrough)
       88:   41:			drawntreasure = random_number(0, 10, 1); //What happens if you start with drawntreasure
call    0 returned 100%
        -:   42:			//drawCard(player, &game); //What happens if you draw a card prematurely
        -:   43:			//z = random_number(0, 500); //If z is higher than 0, it produces a significant access error
       88:   44:			tempcoins = game.coins;
        -:   45:
       88:   46:			myCard = adventurerCard(&drawntreasure, &game, &cardDrawn, &player, temphand, &z);
call    0 returned 100%
       88:   47:			if (tempcoins > game.coins)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:				printf("Error: tempcoins [%d] game.coins[%d]\n", tempcoins, game.coins);
call    0 never executed
        -:   49:			else
       88:   50:				printf("Passed: tempcoins [%d] game.coins[%d]\n", tempcoins, game.coins);
call    0 returned 100%
        -:   51:		}
        -:   52:	}
        -:   53:
        1:   54:	return 0;
        -:   55:}
