        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* villageCardEffect()*/
        -:    2:
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:#include <stdio.h>
        -:    8:#include <math.h>
        -:    9:#include <stdlib.h>
        -:   10:#include <assert.h>
        -:   11:#include <time.h>
        -:   12:#include <string.h>
        -:   13:
        -:   14:
        -:   15:
        -:   16:// Tests shuffle() 
function main called 1 returned 100% blocks executed 95%
        1:   17:int main()
        -:   18:{
        1:   19:	printf("TESTING shuffle() of Kingdom Cards\n");
call    0 returned 100%
        -:   20:
        1:   21:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   22:	int seed = 1000;
        1:   23:	int numplayers = rand() % (MAX_PLAYERS - 1) + 1;
call    0 returned 100%
        1:   24:	int player = rand() % numplayers;
call    0 returned 100%
        -:   25:	struct gameState g;
        1:   26:	int k[10] = {village, smithy, gardens, mine, feast, adventurer, council_room, salvager, sea_hag, steward};
        1:   27:	initializeGame(numplayers, k, seed, &g);
call    0 returned 100%
        -:   28:
        -:   29:	 // Copy gamestate for later comparison
        -:   30:	struct gameState prevDeck;
        1:   31:	memcpy(&prevDeck, &g, sizeof(struct gameState));
        -:   32:
        -:   33:
        1:   34:	int numtests = 100;
        1:   35:	int unshuffledNum = 0;
      101:   36:	for(int i = 0; i < numtests; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      100:   37:		shuffle(player, &g);
call    0 returned 100%
      100:   38:		if(memcmp(&prevDeck.deck[player], &g.deck[player], sizeof(int)* MAX_DECK) != 0) 
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
       91:   39:			unshuffledNum++;
        -:   40:	}
        -:   41:
        1:   42:	int shuffleSuccess = numtests - unshuffledNum;
        1:   43:	printf("Shuffle Percentage: %d/%d \n", shuffleSuccess, numtests);
call    0 returned 100%
        -:   44:
        1:   45:	if(unshuffledNum < numtests )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   46:			printf("TEST PASSED \n");
call    0 returned 100%
        -:   47:	else
    #####:   48:		printf("TEST FAILED \n");
call    0 never executed
        -:   49:	
        1:   50:	printf("--------------Test Complete-----------------------\n");
call    0 returned 100%
        -:   51:
        -:   52:}
        -:   53:
