        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include <string.h>
        -:    9:
function main called 1 returned 100% blocks executed 90%
        1:   10:int main () {
        -:   11:	
        1:   12:	printf("TESTING council_room \n");
call    0 returned 100%
        -:   13:	struct gameState G;          
        -:   14:	struct gameState gTest;          
        1:   15:	int seed = 1000;
        1:   16:	int k[10] = {village, smithy, gardens, mine, feast, adventurer, council_room, salvager, sea_hag, steward};
        1:   17:	int player1 = 0;
        1:   18:	int players = 2;
        1:   19:	int numTests = 1; 
        -:   20:	//int card = smithy;
        1:   21:	int effect = 1;
        -:   22:	//int initHandCount;
        -:   23:	int position;
        -:   24:
        -:   25:
        1:   26:	if(effect == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   27:		effect = 0;
        -:   28:
        -:   29:	int i;
        -:   30:	int n;
        2:   31:	for (i = 0; i < numTests; i++) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   32:
        -:   33:		// initialize the game
        1:   34:		initializeGame(players, k, seed, &G);
call    0 returned 100%
        -:   35:
        -:   36:		// copy over to test gameState
        1:   37:		memcpy(&gTest, &G, sizeof(struct gameState));
        -:   38:
        -:   39:		// load hand
        1:   40:		gTest.hand[player1][0] = council_room;
        1:   41:		int preNumCards = G.handCount[0];
        1:   42:		int preNumBuys = G.numBuys;
        -:   43:		//int kingCards = 14;
        5:   44:		for(n = 1; n < 5; n++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        4:   45:			gTest.hand[player1][n] = k[n+3];
        -:   46:		//kingCards++;
        -:   47:		}
        -:   48:
        -:   49:		//initHandCount = 6;
        1:   50:		position = gTest.hand[player1][0]; //smithy ready to play
        -:   51:
        -:   52:		//effect = cardEffect(council_room, 0, 0, 0, &gTest, position, 0);
        -:   53:
        -:   54:		//Testing if council_room draws 4 and increments NumBuys for player, and draws 1 for remaining players
        1:   55:		cardEffect(council_room, 0, 0, 0, &gTest, position, 0);
call    0 returned 100%
        1:   56:		if(gTest.handCount[0] == preNumCards + 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   57:			printf("HandCount TEST PASSED\n");
call    0 returned 100%
        -:   58:		else
    #####:   59:			printf("HandCount TEST FAILED\n");
call    0 never executed
        -:   60:		
        -:   61:		//printf("%d", G.numBuys);
        -:   62:		//preNumBuys++;
        1:   63:		if(gTest.numBuys == preNumBuys + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   64:			printf("numBuys TEST PASSED\n");
call    0 returned 100%
        -:   65:		else 
    #####:   66:			printf("numBuys TEST FAILED\n");
call    0 never executed
        -:   67:	}
        -:   68:
        -:   69:
        1:   70:	printf("--------------Test Complete-----------------------\n");
call    0 returned 100%
        -:   71:	
        1:   72:	return 0;
        -:   73:}
