        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:
        -:   10:
function random_number called 18 returned 100% blocks executed 100%
       18:   11:int random_number(int lower, int upper, int count) 
        -:   12:{ 
        -:   13:    int i, num; 
       36:   14:    for (i = 0; i < count; i++) { 
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
       18:   15:        num = (rand() %(upper - lower + 1)) + lower; 
call    0 returned 100%
        -:   16:    } 
       18:   17:	return num;
        -:   18:}
        -:   19:
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 90%
        1:   22:int main() 
        -:   23:{
        1:   24:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   25:	int i;
        1:   26:	int player = 0;
        -:   27:	struct gameState state, test;
        1:   28:	int k[10] = {village, smithy, gardens, mine, feast, adventurer, council_room, salvager, sea_hag, steward};
        -:   29:
       18:   30:	for(i=0; i < random_number(0, 100, 1); i++ ){
call    0 returned 100%
branch  1 taken 94%
branch  2 taken 6% (fallthrough)
       17:   31:		int numPlayers = (rand() % 50);
call    0 returned 100%
       17:   32:		int seed = (rand() % 5000);
call    0 returned 100%
        -:   33:
        -:   34:		// initialize a game state and player cards
       17:   35:		initializeGame(numPlayers, k, seed, &state);		
call    0 returned 100%
        -:   36:
       17:   37:		printf("---------Smithy Test #%d----------\n", i+1);
call    0 returned 100%
        -:   38:
        -:   39:		// copy the game state to a test case
       17:   40:		memcpy(&test, &state, sizeof(struct gameState));
        -:   41:
       17:   42:		cardEffect(smithy, 0, 0, 0, &state, 0, NULL);
call    0 returned 100%
        -:   43:
       17:   44:		player = whoseTurn(&test);
call    0 returned 100%
        -:   45:		
        -:   46:		//Check if player played smithy
       17:   47:		if(test.playedCardCount + 1 == state.playedCardCount)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       17:   48:			printf("Passed where player discarded smithy\n");
call    0 returned 100%
        -:   49:		else
    #####:   50:			printf("Failed where player did not discard smithy\n");
call    0 never executed
        -:   51:			
        -:   52:		
       17:   53:		if(test.handCount[player] + 2 == state.handCount[player])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   54:			printf("Passed where 3 extra cards were drawn\n");
call    0 never executed
        -:   55:		else
       17:   56:			printf("Failed where 3 extra cards were not drawn\n");
call    0 returned 100%
        -:   57:		}
        1:   58:	printf("---------------------------------------------\n");
call    0 returned 100%
        -:   59:}
