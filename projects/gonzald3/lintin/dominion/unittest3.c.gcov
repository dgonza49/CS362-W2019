        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "assert.h"
        -:    4:#include "dominion.h"
        -:    5:#include "rngs.h"
        -:    6:#include <time.h>
        -:    7:
        -:    8:
        -:    9://Unit Test for buyCard
        -:   10:
function main called 1 returned 100% blocks executed 88%
        1:   11:int main(){
        -:   12:
        1:   13:	printf("TESTING buyCard() \n");
call    0 returned 100%
        -:   14:	struct gameState state;
        -:   15:	int success;
        1:   16:	int k[10] = {village, smithy, gardens, mine, feast, adventurer, council_room, salvager, sea_hag, steward};
        1:   17:	int numBuys = 1;
        1:   18:	int numCoins = 1;
        1:   19:	if(numBuys == 1 || numCoins == 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        1:   20:		numBuys = 0;
        1:   21:		numCoins = 0;
        -:   22:	}
        -:   23:
        1:   24:	initializeGame(2, k, 2, &state);
call    0 returned 100%
        -:   25:
        1:   26:	int numTests = 100;
      101:   27:	for(int i = 0; i < numTests; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      100:   28:		srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
      100:   29:		numBuys = rand() % 5 + 1;
call    0 returned 100%
      100:   30:		numCoins = rand() % 15 + 1;
call    0 returned 100%
        -:   31:		
        -:   32:	
      100:   33:		if(state.numBuys == 0 || state.coins == 0){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       99:   34:			success = buyCard(5, &state);
call    0 returned 100%
       99:   35:			assert(success == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   36:		}else{
        1:   37:			success = buyCard(5, &state);
call    0 returned 100%
        1:   38:			assert(success == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   39:		}
        -:   40:		
        -:   41:	}
        -:   42:
        1:   43:	printf("TEST PASSED\n");
call    0 returned 100%
        -:   44:	
        1:   45:	printf("--------------Test Complete-----------------------\n");
call    0 returned 100%
        -:   46:
        1:   47:	return 0;
        -:   48:}
